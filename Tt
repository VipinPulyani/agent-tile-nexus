import re
import textwrap

def extract_function_name(python_code: str) -> str:
    """Extract the function name from generated code."""
    match = re.search(r"def\s+(\w+)\s*\(", python_code)
    return match.group(1) if match else "fetch_data"


def inject_dynamic_test_call(python_code: str, test_values: dict) -> str:
    """Clean code, extract function name, and inject test call with parameters."""
    # Clean and normalize code
    cleaned = python_code.encode().decode("unicode_escape")
    cleaned = textwrap.dedent(cleaned).replace("```python", "").replace("```", "").strip()

    # Fix unclosed docstrings
    for quote in ['"""', "'''"]:
        if cleaned.count(quote) % 2 != 0:
            cleaned += f"\n{quote}"

    # Extract function name
    func_name = extract_function_name(cleaned)

    # Build function call with test values
    param_str = ', '.join([f'{k}={repr(v)}' for k, v in test_values.items()])
    call_code = f"\n\n# Injected test call\nresult = {func_name}({param_str})"

    return cleaned + call_code


def execute_python_with_test_values(python_code: str, test_values: dict) -> dict:
    """Execute generated code with test values and return result."""
    try:
        final_code = inject_dynamic_test_call(python_code, test_values)
        local_env = {}
        exec(final_code, {}, local_env)
        return {
            "success": True,
            "result": local_env.get("result", None),
            "executed_code": final_code
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "executed_code": final_code
        }
